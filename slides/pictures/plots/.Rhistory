install.packages(c("ade4", "BH", "car", "chron", "clusterSim", "colorspace", "curl", "data.table", "DBI", "digest", "dplyr", "e1071", "evaluate", "forecast", "formatR", "ggplot2", "git2r", "gtable", "highr", "htmlTable", "htmltools", "httr", "jsonlite", "knitr", "lazyeval", "leaps", "lme4", "lmtest", "lubridate", "mime", "miscTools", "openssl", "pbdZMQ", "plyr", "quantreg", "R2HTML", "R6", "Rcpp", "RcppArmadillo", "RcppEigen", "repr", "reshape2", "rgl", "rmarkdown", "roxygen2", "RPostgreSQL", "rstudioapi", "rversions", "scatterplot3d", "SparseM", "statmod", "stringi", "stringr", "tseries", "tsne", "withr", "XML", "xml2", "yaml", "zoo"))
install.packages(c("ade4", "BH", "car", "chron", "clusterSim", "colorspace", "curl", "data.table", "DBI", "digest", "dplyr", "e1071", "evaluate", "forecast", "formatR", "ggplot2", "git2r", "gtable", "highr", "htmlTable", "htmltools", "httr", "jsonlite", "knitr", "lazyeval", "leaps", "lme4", "lmtest", "lubridate", "mime", "miscTools", "openssl", "pbdZMQ", "plyr", "quantreg", "R2HTML", "R6", "Rcpp", "RcppArmadillo", "RcppEigen", "repr", "reshape2", "rgl", "rmarkdown", "roxygen2", "RPostgreSQL", "rstudioapi", "rversions", "scatterplot3d", "SparseM", "statmod", "stringi", "stringr", "tseries", "tsne", "withr", "XML", "xml2", "yaml", "zoo"))
install.packages(c("ade4", "BH", "car", "chron", "clusterSim", "colorspace", "curl", "data.table", "DBI", "digest", "dplyr", "e1071", "evaluate", "forecast", "formatR", "ggplot2", "git2r", "gtable", "highr", "htmlTable", "htmltools", "httr", "jsonlite", "knitr", "lazyeval", "leaps", "lme4", "lmtest", "lubridate", "mime", "miscTools", "openssl", "pbdZMQ", "plyr", "quantreg", "R2HTML", "R6", "Rcpp", "RcppArmadillo", "RcppEigen", "repr", "reshape2", "rgl", "rmarkdown", "roxygen2", "RPostgreSQL", "rstudioapi", "rversions", "scatterplot3d", "SparseM", "statmod", "stringi", "stringr", "tseries", "tsne", "withr", "XML", "xml2", "yaml", "zoo"))
dotR <- file.path(Sys.getenv("HOME"), ".R")
if (!file.exists(dotR)) dir.create(dotR)
M <- file.path(dotR, "Makevars")
if (!file.exists(M)) file.create(M)
cat("\nCXXFLAGS=-O3 -mtune=native -march=native -Wno-unused-variable -Wno-unused-function",
file = M, sep = "\n", append = TRUE)
cat(readLines(M), sep = "\n")
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies=TRUE)
library(RPostgreSQL)
library(data.table)
drv <- dbDriver("PostgreSQL")
db <- "vypr-a144"
n_responses = 524
option_a_percent = 68.92
option_b_percent = 64.47
data.frame(success=c(option_a_percent/100*n_responses))
data.frame(success=c(option_a_percent/100*n_responses, option_b_percent/100*n_responses))
a = option_a_percent/100
b = option_b_percent/100
x = data.frame(success=c(a*n_responses,b*n_responses),
failures=c((1-a)*n_responses),(1-b)*n_responses)
data.frame(success=c(option_a_percent/100*n_responses, option_b_percent/100*n_responses), failures=)
x
x = data.frame(success=c(a*n_responses,b*n_responses),
failures=c((1-a)*n_responses,(1-b)*n_responses)
return(prop.test())
}
prop.test(250, 500)
x = data.frame(success=c(a*n_responses,b*n_responses),
failures=c((1-a)*n_responses,(1-b)*n_responses)
return(prop.test())
}
prop.test(250, 500)
x = data.frame(success=c(a*n_responses,b*n_responses),
failures=c((1-a)*n_responses,(1-b)*n_responses))
x
return(prop.test())
return(prop.test(x))
x = data.frame(success=c(a*n_responses,b*n_responses),
failures=c((1-a)*n_responses,(1-b)*n_responses))
return(prop.test(x))
as.table(x)
table(x)
matrix(x)
x = matrix(c(a*n_responses,b*n_responses),
c((1-a)*n_responses,(1-b)*n_responses))
x
x = as.matrix(c(a*n_responses,b*n_responses),
c((1-a)*n_responses,(1-b)*n_responses))
x
?as.table
x = matrix(c(a*n_responses,b*n_responses,
(1-a)*n_responses,(1-b)*n_responses),
nrow=2)
x
524*0.6892
524*0.3108
return(prop.test(x))
prop.test(x)
testit <- function(n_responses, option_a_percent, option_b_percent) {
a = option_a_percent/100
b = option_b_percent/100
x = matrix(c(a*n_responses,b*n_responses,
(1-a)*n_responses,(1-b)*n_responses),
nrow=2)
return(prop.test(x))
}
testit(524, 68.92, 64.47)
x = matrix(c(a*n_responses/2,b*n_responses/2,
(1-a)*n_responses/2,(1-b)*n_responses/2),
nrow=2)
prop.test(x)
n = 530
a = 0.6954
b = 0.678
x = matrix(c(a*n/3,b*n/3,c*n/3
(1-a)*n/3,(1-b)*n/3,(1-c)*n/3),
nrow=2)
x = matrix(c(a*n/3,b*n/3,c*n/3
(1-a)*n/3,(1-b)*n/3,(1-c)*n/3),
nrow=3)
oc = 0.6089
x = matrix(c(a*n/3,b*n/3,oc*n/3
(1-a)*n/3,(1-b)*n/3,(1-oc)*n/3),
nrow=3)
c
oc
x = matrix(c(a*n/3,b*n/3,oc*n/3,
(1-a)*n/3,(1-b)*n/3,(1-oc)*n/3),
nrow=3)
x
prop.test(x)
chisq.test(x)
x
x
ss <- data.frame(n=c(524/2, 524/2, 530/3, 530/3, 530/3)
p=c(0.6892, 0.6447, 0.6954, 0.678, 0.6089))
ss <- data.frame(n=c(524/2, 524/2, 530/3, 530/3, 530/3),
p=c(0.6892, 0.6447, 0.6954, 0.678, 0.6089))
ss
ss$success <- ss$n * ss$p
ss$failure <- ss$n - ss$success
ss
ss[,3:4]
as.matrix(ss[,3:4])
prop.test(as.matrix(ss[,3:4]))
ss
sum(ss$success)
sum(ss$failure)
prop.test(122, 53, p=(700/1054))
prop.test(c(122), c(53), p=(700/1054))
prop.test(122, 122+53, p=(700/1054))
prop.test(c(10,20,30),50)
prop.test(c(10,20,30),c(50,50,50))
ss <- data.frame(n=c(519,519,519,519,519),
p=c(0.2277, 0.2258, 0.1975, 0.1092, 0.0829, 0.1568))
ss <- data.frame(n=c(519,519,519,519,519,519),
p=c(0.2277, 0.2258, 0.1975, 0.1092, 0.0829, 0.1568))
ss$success <- ss$n * ss$p
ss$failure <- ss$n - ss$success
prop.test(as.matrix(ss[,3:4]))
ss <- data.frame(n=c(519,519,519,519,519),
p=c(0.2277, 0.2258, 0.1975, 0.1092, 0.0829))
ss$success <- ss$n * ss$p
ss$failure <- ss$n - ss$success
prop.test(as.matrix(ss[,3:4]), p=0.1568)
prop.test(as.matrix(ss[,3:4]), p=c(0.1568,0.1568,0.1568,0.1568,0.1568))
ss <- data.frame(n=c(519,519,519),
p=c(0.2277, 0.2258, 0.1975))
ss$success <- ss$n * ss$p
ss$failure <- ss$n - ss$success
prop.test(as.matrix(ss[,3:4]))
ss <- data.frame(n=c(519,519,519,519),
p=c(0.2277, 0.2258, 0.1975, 0.1092))
ss <- data.frame(n=c(519,519,519),
p=c(0.2277, 0.2258, 0.1975))
ss <- data.frame(n=c(519,519,519,519),
p=c(0.2277, 0.2258, 0.1975, 0.1092))
ss$success <- ss$n * ss$p
ss$failure <- ss$n - ss$success
prop.test(as.matrix(ss[,3:4]))
x <- 1:10
y <- rnorm(10)
d <- data.frame(x,y)
plot(d)
d
x <- 1:10
x
y <- rnorm(10)
y
y <- rnorm(10)
y
d <- data.frame(x,y)
d
plot(d)
cmd
shoes <- c(35,37,37,38,38,38,39,39,39,40,40,40,40,41,41,42,47)
table(shoes)
get_author_for_lines_in_file <- function(repo_path, filename) {
system(paste("cd", repo_path, "; git blame --line-porcelain", filename, "| grep '^author ' | sed -e 's/^author //'"), intern=T)
}
get_author_for_lines_in_file("")
getwd()
setwd("/home/rueb/Infonomics/Projects/lv.bus-factor/datengarten")
get_author_for_lines_in_file("gnpug", "Makefile.am")
get_author_for_lines_in_file("gnupg", "Makefile.am")
source('~/Infonomics/Projects/lv.bus-factor/bus-factor-final-2.r', echo=TRUE)
enumerate_files_in_repo("gnupg")
authors <- get_author_for_lines_in_file("gnupg", "Makefile.am")
table(authors)
as.data.frame(table(authors), responseName="line_count")
lba <- count_of_lines_by_author_in_repo("gnpug")
lba <- count_of_lines_by_author_in_repo("gnupg")
source('~/Infonomics/Projects/lv.bus-factor/bus-factor-final-2.r', echo=TRUE)
lba <- count_of_lines_by_author_in_repo("gnupg")
lba
ac <- calculate_author_contribution(lba)
ac
?markdown
??markdown
library(knitr)
kable(ac)
kable(ac, format="html")
kable(ac, format="html", row.names=F)
kable(ac[1:5], format="html", row.names=F, digits=2)
kable(ac[1:5], format="html", row.names=F, digits=2)
kable(ac[1:5,], format="html", row.names=F, digits=2)
kable(ac[1:7,], format="html", row.names=F, digits=2)
ac
library(ggplot2)
visualise_cumulative <- function(ac) {
ggplot(ac, aes(cumulative_author_count, cumulative_line_count)) + geom_point() +
scale_y_continuous(limits=c(0, max(ac$cumulative_line_count)))
}
ggplot(ac, aes(cumulative_author_count, cumulative_line_count)) + geom_point() + scale_y_continuous(limits=c(0, max(ac$cumulative_line_count))) + stat_smooth(method="lm", formula=y~poly(x,5,raw=T))
visualise_cumulative(ac)
ggplot(ac, aes(cumulative_author_count, cumulative_line_count)) + geom_point()
(p <- ggplot(ac, aes(cumulative_author_count, cumulative_line_count)) + geom_point())
(p <- p + scale_y_continuous(limits=c(0, max(ac$cumulative_line_count))))
ggplot(ac, aes(cumulative_author_count, cumulative_line_count)) + geom_point() + scale_y_continuous(limits=c(0, max(ac$cumulative_line_count))) + stat_smooth(method="lm", formula=y~poly(x,5,raw=T))
ggplot(author_contribution, aes(cumulative_author_percent, cumulative_line_percent)) + geom_line() + expand_limits(y=0, x=0) + scale_x_continuous("Authors",labels=percent) + scale_y_continuous("Lines of Code", labels=percent) + geom_hline(y=0.5, colour="darkgrey")
ggplot(ac, aes(cumulative_author_percent, cumulative_line_percent)) + geom_line() + expand_limits(y=0, x=0) + scale_x_continuous("Authors",labels=percent) + scale_y_continuous("Lines of Code", labels=percent) + geom_hline(y=0.5, colour="darkgrey")
library(scales)
ggplot(ac, aes(cumulative_author_percent, cumulative_line_percent)) + geom_line() + expand_limits(y=0, x=0) + scale_x_continuous("Authors",labels=percent) + scale_y_continuous("Lines of Code", labels=percent) + geom_hline(y=0.5, colour="darkgrey")
ggplot(ac, aes(cumulative_author_percent, cumulative_line_percent)) + geom_line() + expand_limits(y=0, x=0) + scale_x_continuous("Authors",labels=percent) + scale_y_continuous("Lines of Code", labels=percent) + geom_hline(yintercept=0.5, colour="darkgrey")
bus_factor_for_line_percent <- function(lp, critical_line_percent=0.5) {
length(lp[lp<critical_line_percent])
}
ggplot(ac, aes(cumulative_author_count, cumulative_line_percent)) +
geom_line() + expand_limits(y=0, x=0) + scale_x_log10("Number of Authors") +
scale_y_continuous("Lines of Code", labels=percent) + geom_hline(y=0.5, colour="darkgrey") +
geom_point(data=bus_factors, aes(bus_factor, critical_line_percent), colour="red") + geom_text(data=bus_factors, colour="red", aes(bus_factor, critical_line_percent,label=bus_factor), hjust=-1) +
labs(title="Bus Factor for Open Source Projects") + theme_minimal()
ggplot(ac, aes(cumulative_author_count, cumulative_line_percent)) +
geom_line() + expand_limits(y=0, x=0) + scale_x_log10("Number of Authors") +
scale_y_continuous("Lines of Code", labels=percent) + geom_hline(y=0.5, colour="darkgrey") +
geom_point(data=bus_factors, aes(bus_factor, critical_line_percent), colour="red") + geom_text(data=bus_factors, colour="red", aes(bus_factor, critical_line_percent,label=bus_factor), hjust=-1) +
labs(title="Bus Factor for Open Source Projects") + theme_minimal()
ggplot(ac, aes(cumulative_author_count, cumulative_line_percent)) +
geom_line() + expand_limits(y=0, x=0) + scale_x_log10("Number of Authors") +
scale_y_continuous("Lines of Code", labels=percent) + geom_hline(y=0.5, colour="darkgrey") +
geom_point(aes(bus_factor=0, critical_line_percent=0.5), colour="red") + geom_text(data=bus_factors, colour="red", aes(bus_factor, critical_line_percent,label=bus_factor), hjust=-1) +
labs(title="Bus Factor for Open Source Projects") + theme_minimal()
ggplot(ac, aes(cumulative_author_count, cumulative_line_percent)) +
geom_line() + expand_limits(y=0, x=0) + scale_x_log10("Number of Authors") +
scale_y_continuous("Lines of Code", labels=percent) + geom_hline(y=0.5, colour="darkgrey") +
geom_point(aes(bus_factor=0, critical_line_percent=0.5), colour="red") + geom_text(data=bus_factors, colour="red", aes(bus_factor, critical_line_percent,label=bus_factor), hjust=-1) +
labs(title="Bus Factor for Open Source Projects") + theme_minimal()
ggplot(ac, aes(cumulative_author_count, cumulative_line_percent)) +
geom_line() + expand_limits(y=0, x=0) + scale_x_log10("Number of Authors") +
scale_y_continuous("Lines of Code", labels=percent) + geom_hline(y=0.5, colour="darkgrey") +
labs(title="Bus Factor for Open Source Projects") + theme_minimal()
ggplot(ac, aes(cumulative_author_count, cumulative_line_percent)) +
geom_line() + expand_limits(y=0, x=0) + scale_x_log10("Number of Authors") +
scale_y_continuous("Lines of Code", labels=percent) + geom_hline(y=0.5, colour="darkgrey") +
labs(title="Bus Factor for Open Source Projects") + theme_minimal()
ggplot(ac, aes(cumulative_author_count, cumulative_line_percent)) +
geom_line() + expand_limits(y=0, x=0) + scale_x_log10("Number of Authors")
ggplot(ac, aes(cumulative_author_count, cumulative_line_percent)) +
geom_line() + expand_limits(y=0, x=0) + scale_x_log10("Number of Authors") +
scale_y_continuous("Lines of Code", labels=percent)
ggplot(ac, aes(cumulative_author_count, cumulative_line_percent)) +
geom_line() + expand_limits(y=0, x=0) + scale_x_log10("Number of Authors") +
scale_y_continuous("Lines of Code", labels=percent) + geom_hline(yintercept=0.5, colour="darkgrey") +
labs(title="Bus Factor for Open Source Projects") + theme_minimal()
ggplot(ac, aes(cumulative_author_count, cumulative_line_percent)) +
geom_line() + expand_limits(y=0, x=0) + scale_x_log10("Number of Authors") +
scale_y_continuous("Lines of Code", labels=percent) + geom_hline(yintercept=0.5, colour="darkgrey") +
geom_point(aes(0, 0.5), colour="red") + geom_text(aes(0, 0.5, label=0), colour="red", hjust=-1)
ggplot(ac, aes(cumulative_author_count, cumulative_line_percent)) +
geom_line() + expand_limits(y=0, x=0) + scale_x_log10("Number of Authors") +
scale_y_continuous("Lines of Code", labels=percent) + geom_hline(yintercept=0.5, colour="darkgrey") +
geom_point(aes(0, 0.5), colour="red") + geom_text(aes(0, 0.5, label=0), colour="red", hjust=-1) +
labs(title="Bus Factor for Open Source Projects") + theme_minimal()
bus_factor_for_line_percent(ac$cumulative_line_percent)
ggplot(ac, aes(cumulative_author_count, cumulative_line_percent)) +
geom_line() + expand_limits(y=0, x=0) + scale_x_log10("Number of Authors") +
scale_y_continuous("Lines of Code", labels=percent) + geom_hline(yintercept=0.5, colour="darkgrey") +
geom_point(aes(0, 0.5), colour="red") + geom_text(aes(0, 0.5, label=0), colour="red", hjust=-1) +
labs(title="Bus Factor for GNUPG") + theme_minimal()
ggplot(ac, aes(cumulative_author_count, cumulative_line_percent)) +
geom_line() + expand_limits(y=0, x=0) + scale_x_log10("Number of Authors") +
scale_y_continuous("Lines of Code", labels=percent) + geom_hline(yintercept=0.5, colour="darkgrey") +
geom_point(aes(0, 0.5), colour="red") + geom_text(aes(0, 0.5, label=0), colour="red", hjust=-1) +
labs(title="Cumulative Author Contributions to GNUPG") + theme_minimal()
ggplot(ac, aes(cumulative_author_count, cumulative_line_percent)) +
geom_line() + expand_limits(y=0, x=0) + scale_x_log10("Number of Authors") +
scale_y_continuous("Lines of Code", labels=percent) + geom_hline(yintercept=0.5, colour="darkgrey") +
labs(title="Cumulative Author Contributions to GNUPG") + theme_minimal()
ggplot(ac, aes(cumulative_author_count, cumulative_line_percent))
ggplot(ac, aes(cumulative_author_count, cumulative_line_percent))
ggplot(ac, aes(cumulative_author_count, cumulative_line_percent))
+ geom_line()
ggplot(ac, aes(cumulative_author_count, cumulative_line_percent)) +
geom_line()
ggplot(ac, aes(cumulative_author_count, cumulative_line_percent)) + geom_point()
getwd()
setwd("/home/rueb/code/keycraft/presentation/bus-factor/pictures/plots")
setwd("/home/rueb/code/keycraft/presentations/bus-factor/pictures/plots/")
ggsave("2.png, width=800, height=500")
ggsave("2.png", width=800, height=500")
""
ggsave("2.png", width=800, height=500)
ggsave("2.png")
ggsave("2.png", dpi=150)
ggsave("2.png", width=16, height=10, dpi=150, units="cm")
ggsave("2.png", width=12, height=8, dpi=150, units="cm")
ggplot(ac, aes(cumulative_author_count, cumulative_line_percent)) + geom_point()
geom_line()
ggplot(ac, aes(cumulative_author_count, cumulative_line_percent)
ggsave("1.png", width=16, height=10, dpi=150, units="cm")
ggplot(ac, aes(cumulative_author_count, cumulative_line_percent) + geom_point()
ggsave("2.png")
geom_line() + expand_limits(y=0, x=0) + scale_x_log10("Number of Authors") +
scale_y_continuous("Lines of Code", labels=percent) + geom_hline(yintercept=0.5, colour="darkgrey") +
labs(title="Cumulative Author Contributions to GNUPG") + theme_minimal()
ggplot(ac, aes(cumulative_author_count, cumulative_line_percent))
ggsave("1.png", width=16, height=10, dpi=150, units="cm")
ggplot(ac, aes(cumulative_author_count, cumulative_line_percent)) + geom_point()
ggsave("2.png")
saveme <- function(name) {
ggsave(name, width=16, height=10, dpi=150, units="cm")
}
saveme("1.png")
ggplot(ac, aes(cumulative_author_count, cumulative_line_percent))
saveme("1.png")
ggplot(ac, aes(cumulative_author_count, cumulative_line_percent)) + geom_point()
saveme("2.png")
ggplot(ac, aes(cumulative_author_count, cumulative_line_percent)) + geom_line()
saveme("3.png")
saveme <- function(name) {
ggsave(name, width=12, height=8, dpi=150, units="cm")
}
ggplot(ac, aes(cumulative_author_count, cumulative_line_percent))
saveme("1.png")
ggplot(ac, aes(cumulative_author_count, cumulative_line_percent)) + geom_point()
saveme("2.png")
ggplot(ac, aes(cumulative_author_count, cumulative_line_percent)) + geom_line()
saveme("3.png")
ggplot(ac, aes(cumulative_author_count, cumulative_line_percent)) +
geom_line() + expand_limits(y=0, x=0)
saveme("4.png")
saveme <- function(name) {
ggsave(name, width=14, height=7, dpi=150, units="cm")
}
ggplot(ac, aes(cumulative_author_count, cumulative_line_percent))
saveme("1.png")
ggplot(ac, aes(cumulative_author_count, cumulative_line_percent)) +
geom_point()
saveme("2.png")
ggplot(ac, aes(cumulative_author_count, cumulative_line_percent)) +
geom_line()
saveme("3.png")
ggplot(ac, aes(cumulative_author_count, cumulative_line_percent)) +
geom_line() + expand_limits(y=0, x=0)
saveme("4.png")
ggplot(ac, aes(cumulative_author_count, cumulative_line_percent)) +
geom_line() + expand_limits(y=0, x=0) +
scale_y_continuous("Lines of Code", labels=percent)
saveme("5.png")
ggplot(ac, aes(cumulative_author_count, cumulative_line_percent)) +
geom_line() + expand_limits(y=0, x=0) +
scale_y_continuous("Lines of Code", labels=percent) +
scale_x_log10("Number of Authors")
ggplot(ac, aes(cumulative_author_count, cumulative_line_percent)) +
geom_line() + expand_limits(y=0, x=0) +
scale_y_continuous("Lines of Code", labels=percent) +
scale_x_log10("Number of Authors", breaks=c(0,1,2,5,10,15,20,30))
ggplot(ac, aes(cumulative_author_count, cumulative_line_percent)) +
geom_line() + expand_limits(y=0, x=0) +
scale_y_continuous("Lines of Code", labels=percent) +
scale_x_log10("Number of Authors", breaks=c(0,1,2,5,10,15,20,30,50))
saveme("6.png")
ggplot(ac, aes(cumulative_author_count, cumulative_line_percent)) +
geom_line() + expand_limits(y=0, x=0) +
scale_y_continuous("Lines of Code", labels=percent) +
scale_x_log10("Number of Authors", breaks=c(0,10,20,30,40,50))
ggplot(ac, aes(cumulative_author_count, cumulative_line_percent)) +
geom_line() + expand_limits(y=0, x=0) +
scale_y_continuous("Lines of Code", labels=percent) +
scale_x_log10("Number of Authors", breaks=c(0,1,2,3,4,5,6,7,8,9,
10,20,30,40,50))
saveme("6.png")
ggplot(ac, aes(cumulative_author_count, cumulative_line_percent)) +
geom_line() + expand_limits(y=0, x=0) +
scale_y_continuous("Lines of Code", labels=percent) +
scale_x_log10("Number of Authors")
ggplot(ac, aes(cumulative_author_count, cumulative_line_percent)) +
geom_line() + expand_limits(y=0, x=0) +
scale_y_continuous("Lines of Code", labels=percent) +
scale_x_log10("Number of Authors") + geom_hline(yintercept=0.5, colour="darkgrey")
ggplot(ac, aes(cumulative_author_count, cumulative_line_percent))
saveme("1.png")
ggplot(ac, aes(cumulative_author_count, cumulative_line_percent)) +
geom_point()
saveme("2.png")
ggplot(ac, aes(cumulative_author_count, cumulative_line_percent)) +
geom_line()
saveme("3.png")
ggplot(ac, aes(cumulative_author_count, cumulative_line_percent)) +
geom_line() + + geom_hline(yintercept=0.5, colour="darkgrey")
ggplot(ac, aes(cumulative_author_count, cumulative_line_percent)) +
geom_line() + + geom_hline(yintercept=0.5, colour="darkgrey")
ggplot(ac, aes(cumulative_author_count, cumulative_line_percent)) +
geom_line() + geom_hline(yintercept=0.5, colour="darkgrey")
saveme("4.png")
ggplot(ac, aes(cumulative_author_count, cumulative_line_percent)) +
geom_line() + geom_hline(yintercept=0.5, colour="darkgrey") +
expand_limits(y=0, x=0)
saveme("5.png")
ggplot(ac, aes(cumulative_author_count, cumulative_line_percent)) +
geom_line() + expand_limits(y=0, x=0) +
scale_y_continuous("Lines of Code", labels=percent) +
scale_x_log10("Number of Authors", breaks=c(0,1,2,3,4,5,6,7,8,9,
10,20,30,40,50))
ggplot(ac, aes(cumulative_author_count, cumulative_line_percent)) +
geom_line() + geom_hline(yintercept=0.5, colour="darkgrey") +
expand_limits(y=0, x=0)
saveme("5.png")
ggplot(ac, aes(cumulative_author_count, cumulative_line_percent)) +
geom_line() + geom_hline(yintercept=0.5, colour="darkgrey") +
expand_limits(y=0, x=0) +
scale_y_continuous("Lines of Code", labels=percent) +
scale_x_log10("Number of Authors", breaks=c(0,1,2,3,4,5,6,7,8,9,
10,20,30,40,50))
ggplot(ac, aes(cumulative_author_count, cumulative_line_percent)) +
geom_line() + geom_hline(yintercept=0.5, colour="darkgrey") +
expand_limits(y=0, x=0) +
scale_y_continuous("Lines of Code", labels=percent) +
scale_x_log10("Number of Authors", breaks=c(0,1,2,3,4,5,6,7,8,9,
10,20,30,40,50))
ggplot(ac, aes(cumulative_author_count, cumulative_line_percent)) +
geom_line() + geom_hline(yintercept=0.5, colour="darkgrey") +
expand_limits(y=0, x=0) +
scale_y_continuous("Lines of Code", labels=percent) +
scale_x_log10("Number of Authors", breaks=c(0,10,20,30,40,50))
ggplot(ac, aes(cumulative_author_count, cumulative_line_percent)) +
geom_line() + geom_hline(yintercept=0.5, colour="darkgrey") +
expand_limits(y=0, x=0) +
scale_y_continuous("Lines of Code", labels=percent)
ggplot(ac, aes(cumulative_author_count, cumulative_line_percent)) +
geom_line() + geom_hline(yintercept=0.5, colour="darkgrey") +
expand_limits(y=0, x=0) +
scale_y_continuous("Lines of Code", labels=percent) +
scale_x_log10("Number of Authors", breaks=c(0,10,20,30,40))
ggplot(ac, aes(cumulative_author_count, cumulative_line_percent)) +
geom_line() + geom_hline(yintercept=0.5, colour="darkgrey") +
expand_limits(y=0, x=0) +
scale_y_continuous("Lines of Code", labels=percent) +
scale_x_log10("Number of Authors", breaks=c(0,10,20,30,40,50))
ggplot(ac, aes(cumulative_author_count, cumulative_line_percent)) +
geom_line() + expand_limits(y=0, x=0) +
scale_y_continuous("Lines of Code", labels=percent) +
scale_x_log10("Number of Authors") + geom_hline(yintercept=0.5, colour="darkgrey")
ggplot(ac, aes(cumulative_author_count, cumulative_line_percent)) +
geom_line() + geom_hline(yintercept=0.5, colour="darkgrey") +
expand_limits(y=0, x=0) +
scale_y_continuous("Lines of Code", labels=percent) +
scale_x_log10("Number of Authors", breaks=c(0,10,20,30,40,50)) +
labs(title="Cumulative Author Contributions to GNUPG")
saveme("8.png")
ggplot(ac, aes(cumulative_author_count, cumulative_line_percent)) +
geom_line() + geom_hline(yintercept=0.5, colour="darkgrey") +
expand_limits(y=0, x=0) +
scale_y_continuous("Lines of Code", labels=percent) +
scale_x_log10("Number of Authors", breaks=c(0,10,20,30,40,50)) +
labs(title="Cumulative Author Contributions to GNUPG") +
theme_minimal()
saveme("9.png")
library(xkcd)
install.packages(xkcd)
install.packages("xkcd")
ggplot(ac, aes(cumulative_author_count, cumulative_line_percent)) +
geom_line() + geom_hline(yintercept=0.5, colour="darkgrey") +
expand_limits(y=0, x=0) +
scale_y_continuous("Lines of Code", labels=percent) +
scale_x_log10("Number of Authors", breaks=c(0,10,20,30,40,50)) +
labs(title="Cumulative Author Contributions to GNUPG") +
theme_xkcd()
library("xkcd")
ggplot(ac, aes(cumulative_author_count, cumulative_line_percent)) +
geom_line() + geom_hline(yintercept=0.5, colour="darkgrey") +
expand_limits(y=0, x=0) +
scale_y_continuous("Lines of Code", labels=percent) +
scale_x_log10("Number of Authors", breaks=c(0,10,20,30,40,50)) +
labs(title="Cumulative Author Contributions to GNUPG") +
theme_xkcd()
vignette("xkcd-intro")
library(extrafont)
'xkcd' %in% fonts())
'xkcd' %in% fonts()
download.file("http://simonsoftware.se/other/xkcd.ttf",
dest="xkcd.ttf", mode="wb")
system("cp xkcd.ttf ~/.fonts")
font_import(pattern = "[X/x]kcd", prompt=FALSE)
fonts()
fonttable()
loadfonts()
'xkcd' %in% fonts()
ggplot(ac, aes(cumulative_author_count, cumulative_line_percent)) +
geom_line() + geom_hline(yintercept=0.5, colour="darkgrey") +
expand_limits(y=0, x=0) +
scale_y_continuous("Lines of Code", labels=percent) +
scale_x_log10("Number of Authors", breaks=c(0,10,20,30,40,50)) +
labs(title="Cumulative Author Contributions to GNUPG") +
theme_xkcd()
ggplot(ac, aes(cumulative_author_count, cumulative_line_percent)) +
geom_line() + geom_hline(yintercept=0.5, colour="darkgrey") +
expand_limits(y=0, x=0) +
scale_y_continuous("Lines of Code", labels=percent) +
scale_x_log10("Number of Authors", breaks=c(0,10,20,30,40,50)) +
labs(title="Cumulative Author Contributions to GNUPG") +
theme_xkcd()
xrange <- range(mtcars$mpg)
yrange <- range(mtcars$wt)
set.seed(123) # for reproducibility
ggplot() + geom_point(aes(mpg, wt), data=mtcars) +
xkcdaxis(xrange,yrange)
ac <- read.csv("/home/rueb/Infonomics/Projects/lv.bus-factor/gnupg.csv")
ac
lba <- read.csv("/home/rueb/Infonomics/Projects/lv.bus-factor/gnupg.csv")
ac <- calculate_author_contribution(lba)
ggplot(ac, aes(cumulative_author_count, cumulative_line_percent)) +
geom_line() + geom_hline(yintercept=0.5, colour="darkgrey") +
expand_limits(y=0, x=0) +
scale_y_continuous("Lines of Code", labels=percent) +
scale_x_log10("Number of Authors", breaks=c(0,10,20,30,40,50)) +
labs(title="Cumulative Author Contributions to GNUPG") +
theme_xkcd()
